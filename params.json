{"name":"Backchat-websocket","body":"# Backchat WebSocket\r\n\r\nA scala based client for websockets based on netty and akka futures.\r\nIt draws its inspiration from finagle, faye-websocket, zeromq, akka, ...\r\n\r\nThe aim of this project is to provide a websocket client to be used in non-browser applications.\r\nThis client should be reliable by making a best effort not to lose any messages and gracefully recover from disconnections.\r\n\r\nThe server should serve regular websocket applications but can be configured for more reliability too.\r\n\r\n## Features\r\nTo reach said goals this library implements:\r\n\r\n* Message Acking: you can decide if you want to ack a message on a per message basis\r\n\r\n```scala\r\nclient ! \"the message\".needsAck(within = 5 seconds)\r\n```\r\n\r\n* PingPong: this is baked into the websocket protocol, the library ensures it really happens\r\n\r\nIn addition to the shared items the client optionally does:\r\n\r\n* reconnect to the server on a backoff schedule indefinitely or for a max amount of times\r\n* during phases of disconnection it will buffer the messages to a file so that upon reconnection the messages will all be sent to the server.\r\n\r\n## Usage\r\n\r\nThis library is available on maven central.\r\n\r\n```scala\r\nlibraryDependencies += \"io.backchat.websocket\" %% \"scala-websocket\" % \"0.1.0\"\r\n```\r\n\r\n#### Create a websocket server\r\n\r\n```scala\r\nimport io.backchat.websocket._\r\n\r\n(WebSocketServer(8125) {\r\n  new WebSocketServerClient {\r\n    def receive = {\r\n      case TextMessage(text) =>\r\n        println(text)\r\n        send(text)\r\n    }\r\n  }\r\n}).start\r\n```\r\n\r\n#### Create a websocket client\r\n\r\n```scala\r\nimport io.backchat.websocket._\r\n\r\nnew WebSocket with BufferedWebSocket {\r\n  val uri = URI.create(\"ws://localhost:8125/\")\r\n\r\n  def receive = {\r\n    case TextMessage(text) =>\r\n      println(\"RECV: \" + text)\r\n  }\r\n\r\n  connect() onSuccess {\r\n    case _ =>\r\n      println(\"connected to: %s\" format uri.toASCIIString)\r\n      system.scheduler.schedule(0 seconds, 1 second) {\r\n        send(\"message \" + messageCounter.incrementAndGet().toString)\r\n      }\r\n  }\r\n}\r\n```\r\n\r\nThere are [code examples](https://github.com/mojolly/backchat-websocket/tree/master/src/main/scala/io/backchat/websocket/examples) that show all the events being raised and a chat server/client.\r\n\r\n* Echo ([server](https://github.com/mojolly/backchat-websocket/blob/master/src/main/scala/io/backchat/websocket/examples/PrintingEchoServer.scala) | [client](https://github.com/mojolly/backchat-websocket/blob/master/src/main/scala/io/backchat/websocket/examples/PrintingEchoClient.scala))\r\n* All Events ([server](https://github.com/mojolly/backchat-websocket/blob/master/src/main/scala/io/backchat/websocket/examples/PrintAllEventsServer.scala) | [client](https://github.com/mojolly/backchat-websocket/blob/master/src/main/scala/io/backchat/websocket/examples/PrintAllEventsClient.scala))\r\n* Chat ([server](https://github.com/mojolly/backchat-websocket/blob/master/src/main/scala/io/backchat/websocket/examples/ChatServer.scala) | [client](https://github.com/mojolly/backchat-websocket/blob/master/src/main/scala/io/backchat/websocket/examples/ChatClient.scala))\r\n\r\n## Patches\r\nPatches are gladly accepted from their original author. Along with any patches, please state that the patch is your original work and that you license the work to the *backchat-websocket* project under the MIT License.\r\n\r\n## License\r\nMIT licensed. check the [LICENSE](https://github.com/mojolly/backchat-websocket/blob/master/LICENSE) file\r\n\r\n","tagline":"A reliable netty websocket server built on top of akka","google":"UA-240612-7","note":"Don't delete this file! It's used internally to help with page regeneration."}